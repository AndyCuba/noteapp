{"version":3,"sources":["hooks/hooks.tsx","redux/reducers/dataReducer/dataReducer.ts","components/NoteForm/NoteForm.tsx","components/NoteList/NotesList.tsx","components/TagList/TagList.tsx","pages/HomePage/HomePage.tsx","pages/NotePage/NotePage.tsx","components/Header/Header.tsx","App.tsx","redux/rootReducer.ts","redux/store.ts","helpers/helpers.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","ADD_NOTE","REMOVE_NOTE","ADD_TAG","REMOVE_TAG","CHANGE_TAG_STATUS","EDIT_NOTE","initialDataState","notes","tags","NoteForm","dispatch","state","data","input","useRef","className","onSubmit","e","preventDefault","current","value","formValue","type","payload","id","Date","now","toString","matches","match","uniqueTags","Array","from","Set","filter","some","tag","name","includes","autoComplete","ref","placeholder","NotesList","activeTags","isActive","handleClick","target","note","every","text","map","to","onClick","TagList","tagName","index","HomePage","NotePage","history","useHistory","noteId","useParams","inputArea","handleSubmit","innerText","push","contentEditable","suppressContentEditableWarning","onKeyPress","key","highlightClassName","searchWords","autoEscape","textToHighlight","Header","App","path","component","exact","rootReducer","combineReducers","action","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","middlewares","applyMiddleware","composedEnhancers","composeWithDevTools","store","createStore","subscribe","throttle","stringify","setItem","saveState","getState","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.dccf570f.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport type { RootState, AppDispatch } from '../redux/store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;","import { \r\n    AddNoteType, \r\n    RemoveNoteType, \r\n    AddTagType,\r\n    RemoveTagType,\r\n    EditNoteType,\r\n    ChangeTagStatusType,\r\n    IinitialDataStateType, \r\n    ActionTypes\r\n} from './dataTypes';\r\n\r\n//ACTIONS\r\nconst ADD_NOTE = 'ADD_NOTE';\r\nconst REMOVE_NOTE = 'REMOVE_NOTE';\r\nconst ADD_TAG = 'ADD_TAG';\r\nconst REMOVE_TAG = 'REMOVE_TAG';\r\nconst CHANGE_TAG_STATUS = 'CHANGE_TAG_STATUS';\r\nconst EDIT_NOTE = 'EDIT_NOTE';\r\n\r\nconst addNote = (note: string): AddNoteType => ({\r\n    type: ADD_NOTE,\r\n    payload: note,\r\n    id: Date.now().toString()\r\n});\r\n\r\nconst removeNote = (id: string): RemoveNoteType => ({\r\n    type: REMOVE_NOTE,\r\n    payload: id\r\n});\r\n\r\nconst addTag = (tag: string[]): AddTagType => ({\r\n    type: ADD_TAG,\r\n    payload: tag\r\n});\r\n\r\nconst removeTag = (tag: string): RemoveTagType => ({\r\n    type: REMOVE_TAG,\r\n    payload: tag\r\n});\r\n\r\nconst changeTagStatus = (name: string): ChangeTagStatusType => ({\r\n    type: CHANGE_TAG_STATUS,\r\n    payload: name\r\n});\r\n\r\nconst editNote = (id: string, text: string): EditNoteType => ({\r\n    type: EDIT_NOTE,\r\n    id,\r\n    text\r\n});\r\n\r\n// INITIAL STATE\r\nconst initialDataState: IinitialDataStateType = {\r\n    notes: [],\r\n    tags: []\r\n};\r\n\r\n// REDUCER\r\nconst dataReducer = (state = initialDataState, action: ActionTypes): IinitialDataStateType => {\r\n    switch (action.type) {\r\n        case ADD_NOTE:\r\n            return {\r\n                ...state,\r\n                notes: [\r\n                    ...state.notes,\r\n                    { \r\n                        text: action.payload,\r\n                        id: action.id\r\n                    }\r\n                ]\r\n            };\r\n        case REMOVE_NOTE:\r\n            return {\r\n                ...state,\r\n                notes: [\r\n                    ...state.notes.filter(note => note.id !== action.payload)\r\n                ]\r\n            };\r\n        case ADD_TAG:\r\n            return {\r\n                ...state,\r\n                tags: [\r\n                    ...state.tags, \r\n                    ...action.payload.map(tag => ({ name: tag, isActive: false }))\r\n                ]\r\n            };\r\n        case REMOVE_TAG:\r\n            return {\r\n                ...state,\r\n                tags: [\r\n                    ...state.tags.filter(tag => tag.name !== action.payload)\r\n                ]\r\n            };\r\n        case CHANGE_TAG_STATUS:\r\n            return {\r\n                ...state,\r\n                tags: [\r\n                    ...state.tags.map(tag => {\r\n                        if(tag.name.includes(action.payload)) {\r\n                            return { name: tag.name, isActive: !tag.isActive }\r\n                        } else return tag;\r\n                    })\r\n                ]\r\n            };\r\n        case EDIT_NOTE:\r\n            return {\r\n                ...state,\r\n                notes: [\r\n                    ...state.notes.map(note => {\r\n                        if(note.id.includes(action.id)) {\r\n                            return { text: action.text, id: action.id }\r\n                        } else return note;\r\n                    })\r\n                ]\r\n            };\r\n        default:\r\n            return { ...state };\r\n    };\r\n};\r\n\r\nexport {\r\n    dataReducer, \r\n    ADD_NOTE, \r\n    REMOVE_NOTE,\r\n    ADD_TAG,\r\n    REMOVE_TAG,\r\n    CHANGE_TAG_STATUS,\r\n    EDIT_NOTE,\r\n    addNote, \r\n    removeNote,\r\n    addTag,\r\n    removeTag,\r\n    changeTagStatus,\r\n    editNote\r\n};\r\n","import { useRef } from 'react';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport { addNote, addTag } from '../../redux/reducers/dataReducer/dataReducer';\r\nimport './NoteForm.scss';\r\n\r\nconst NoteForm = () => {\r\n    const dispatch = useAppDispatch();\r\n    const tags = useAppSelector(state => state.data.tags);\r\n    const input = useRef<HTMLInputElement | null>(null);\r\n\r\n    const handleSubmit = (e: React.FormEvent<EventTarget>) => {\r\n        e.preventDefault();\r\n        \r\n        if(input.current?.value) {\r\n            const formValue = input.current.value;\r\n\r\n            dispatch(addNote(formValue));\r\n\r\n            const matches = formValue.match(/#\\w+/g);\r\n            if(matches) {\r\n                const uniqueInputValues = Array.from(new Set([...matches]));\r\n                // Checks inputed values for matching some existing tag\r\n                const uniqueTags = uniqueInputValues.filter(value => {\r\n                    if(tags.some(tag => tag.name.includes(value))) {\r\n                        return false;\r\n                    } else {\r\n                        return value;\r\n                    };\r\n                });\r\n                // If there is a unique tag, add it as new\r\n                if(uniqueTags[0]) dispatch(addTag(uniqueTags));\r\n            };\r\n\r\n            input.current.value = ''; \r\n        };\r\n    };\r\n\r\n    return(\r\n        <div className=\"noteForm\">\r\n            <form onSubmit={handleSubmit} autoComplete=\"on\">\r\n                <input \r\n                    type=\"text\" \r\n                    ref={input} \r\n                    placeholder={'Please, enter your note'}\r\n                    className={'noteForm__input'}\r\n                />\r\n                <button type=\"submit\" className={'noteForm__button'}>Create</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoteForm;","import { Link } from 'react-router-dom';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport { removeNote } from '../../redux/reducers/dataReducer/dataReducer';\r\nimport { NoteType } from '../../redux/reducers/dataReducer/dataTypes';\r\n\r\nimport './NoteList.scss';\r\n\r\nconst NotesList = () => {\r\n    const dispatch = useAppDispatch();\r\n    const notes = useAppSelector(state => state.data.notes);\r\n    const activeTags = useAppSelector(state => state.data.tags.filter(tag => tag.isActive));\r\n    \r\n    //Removes note by its id\r\n    const handleClick = (e: React.FormEvent<EventTarget>): void => {\r\n        e.preventDefault();\r\n        if(e.target) {\r\n            const target = e.target as HTMLButtonElement;\r\n            dispatch(removeNote(target.id));\r\n        };\r\n    };\r\n\r\n    //Checks every active tag and returns notes that include active tags\r\n    const filterByActiveTags = (note: NoteType) => {\r\n        if(activeTags[0]) {\r\n            if(activeTags.every(tag => note.text.includes(tag.name))) {\r\n                return note;\r\n            } else {\r\n                return;\r\n            };\r\n           \r\n        };\r\n        return note;\r\n    };\r\n\r\n    // Creates list item for every note\r\n    const mapNotes = (note: NoteType) => {\r\n        return (\r\n            <li key={note.id}>\r\n                <p>{note.text}</p>\r\n                <div>\r\n                    <Link to={`/notes/${note.id}`} className=\"notesList__edit_link\" />\r\n                    <button \r\n                        id={note.id} \r\n                        onClick={handleClick} \r\n                        className=\"notesList__delete_button\"\r\n                    >\r\n                    </button>  \r\n                </div>\r\n                \r\n            </li>\r\n        );\r\n    };\r\n\r\n    return(\r\n        <div className=\"notesList\">\r\n            <h2>Your notes:</h2>\r\n            {\r\n                notes[0] ? \r\n                    (<ul className=\"notesList__ul\">{notes.filter(filterByActiveTags).map(mapNotes)}</ul>) : \r\n                    <p>You have no notes</p>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotesList;","import { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport { changeTagStatus, removeTag } from '../../redux/reducers/dataReducer/dataReducer';\r\nimport './TagList.scss';\r\n\r\nconst TagList = () => {\r\n    const dispatch = useAppDispatch();\r\n    const tags = useAppSelector(state => state.data.tags);\r\n\r\n    const handleClick = (e: React.FormEvent<EventTarget>): void => {\r\n        if(e.target) {\r\n            let target = e.target as HTMLButtonElement;\r\n            if(target.tagName === 'BUTTON') {\r\n\r\n                dispatch(removeTag(target.id));\r\n\r\n            } else {\r\n                let target = e.target as HTMLDivElement;\r\n                dispatch(changeTagStatus(target.id));\r\n                };\r\n            };   \r\n    };\r\n\r\n    return(\r\n        <div className=\"tagList\">\r\n            <h3>Find note by hashtag:</h3>\r\n            <ul>\r\n            {\r\n                tags[0] ? \r\n                    tags.map(\r\n                        (tag, index)=> \r\n                        <li \r\n                            key={index} \r\n                            id={tag.name} \r\n                            onClick={handleClick} \r\n                            className={tag.isActive ? 'active tagList__tag' : 'not-active tagList__tag'}\r\n                        >\r\n                            {tag.name}\r\n                            <button id={tag.name}></button>\r\n                        </li>\r\n                    ) : \r\n                    <h2>You have no tags</h2>\r\n            }\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TagList;","import NoteForm from '../../components/NoteForm/NoteForm';\r\nimport NotesList from '../../components/NoteList/NotesList';\r\nimport TagList from '../../components/TagList/TagList';\r\n\r\nconst HomePage = () => {\r\n\r\n    return(\r\n        <div className={'app-wrapper'}>\r\n            <NoteForm />\r\n            <TagList />\r\n            <NotesList/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;","import { useRef } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { useAppDispatch, useAppSelector } from '../../hooks/hooks';\r\nimport { editNote } from '../../redux/reducers/dataReducer/dataReducer';\r\nimport { AppStateType } from '../../redux/store';\r\n\r\nimport './NotePage.scss';\r\n\r\ntype ParamTypes = {\r\n    noteId: string\r\n};\r\n\r\nconst NotePage = () => {\r\n    const dispatch = useAppDispatch();\r\n    const history = useHistory();\r\n    const { noteId } = useParams<ParamTypes>();\r\n    const tags = useAppSelector(state => state.data.tags);\r\n    const inputArea = useRef<HTMLDivElement | null>(null);\r\n    const noteSelector = (state: AppStateType) => state.data.notes.filter(\r\n        note => note.id === noteId);\r\n\r\n    const [note] = useAppSelector(noteSelector);\r\n    \r\n    const handleSubmit = (e: React.FormEvent<EventTarget>) => {\r\n        e.preventDefault();\r\n        if(e.target && inputArea.current?.innerText) {\r\n            const target = e.target as HTMLFormElement;\r\n            dispatch(editNote(target.id, inputArea.current.innerText));\r\n            history.push('/');\r\n        };\r\n    };\r\n\r\n    const handleEnterPress = (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if(e.key === 'Enter'){\r\n            handleSubmit(e);\r\n        };\r\n    };\r\n\r\n    return(\r\n        <div className={\"app-wrapper notePage\"}>\r\n            <h2>Сlick on your note to edit:</h2>\r\n            <form onSubmit={handleSubmit} id={noteId}>\r\n                <div \r\n                    contentEditable={true} \r\n                    suppressContentEditableWarning={true} \r\n                    ref={inputArea}\r\n                    id={noteId}\r\n                    className={\"notePage__input-area\"}\r\n                    onKeyPress={handleEnterPress}\r\n                >\r\n                    <Highlighter\r\n                        highlightClassName=\"highlight\"\r\n                        searchWords={tags.map(tag => tag.name)}\r\n                        autoEscape={false}\r\n                        textToHighlight={note.text}\r\n                    />\r\n                    \r\n                </div>\r\n                <button type=\"submit\">Save note</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NotePage;","import { Link } from 'react-router-dom';\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header className=\"header\">   \r\n                <h1>\r\n                    <Link to=\"/\">Note App</Link>\r\n                </h1>             \r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","import { Route, Switch } from 'react-router-dom';\n\nimport HomePage from './pages/HomePage/HomePage';\nimport NotePage from './pages/NotePage/NotePage';\nimport Header from './components/Header/Header';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Switch>\n        <Route path=\"/\" component={HomePage} exact/>\n        <Route path=\"/notes/:noteId\" component={NotePage}/>\n      </Switch> \n    </div>  \n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { dataReducer } from './reducers/dataReducer/dataReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    data: dataReducer\r\n});\r\n\r\nexport default rootReducer;","import { applyMiddleware, createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport throttle from 'lodash.throttle';\r\nimport { loadState, saveState } from '../helpers/helpers';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst persistedState = loadState(); //Load state from Local Storage\r\n\r\nconst middlewares = [\r\n    applyMiddleware()\r\n];\r\n\r\nconst composedEnhancers = composeWithDevTools(\r\n    ...middlewares\r\n);\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    composedEnhancers\r\n);\r\n\r\nstore.subscribe(throttle(() => { //Save state to Local Storage\r\n    saveState({\r\n        data: store.getState().data\r\n    });\r\n}, 1000));\r\n\r\n// REDUX TYPES\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport default store;","import { AppStateType } from '../redux/store';\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        };\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    };\r\n};\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch (err) {\r\n        return null;\r\n    };\r\n};","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}